整体C语言学习框架
1.数据结构和运算符以及C语言控制语句
2.数组与函数
3.指针结构体链表							时间：20220223-20220227	//题目练习
4.C语言预处理                               时间：20220309-20220310

4.C语言预处理
    (1)C语言预处理
        a)C语言预处理
            预处理又称为编译预处理，是指在程序正式编译之前进行的前期编译处理阶段，主要是像编译器传递某些信息。
            以#号（编译预处理符号）开头的命令都是编译预处理命令，并且编译预处理命令语句后面是没有分号（;）
        b)常用编译预处理命令
            *头文件包含（#include）
                #include编译预处理命令主要是用于插入头文件。
                命名格式：#include<插入头文件名称>
                    <>  :在系统指定目录中查找需要插入的头文件，一般用于查找标准库头文件或三方库头文件
                    ""  :在整个工程目录下查找需要插入的头文件，如果找不到，再从系统指定目录中查找需要插入的头文件。一般用于查找自定义库头文件
            *宏定义（#define）
                描述：宏定义就是替换的意思，吧表达式常量等内容，利用一个自定义标识符来进行替换操作
                应用：
                    无参宏：指该宏不需要参数输入，仅仅用于替换。
                        格式：#define A b   //使用A代替B来使用
                        在使用宏定义的时候，宏定义后面不要加对应的符号，宏定义在定义的时候不会检测语法错误，只有在宏展开的时候才会检测语法错误
                        使用
                            --替换一个数据类型：#define unit unsigned int   //使用unit标识符替换无符号整数类型
                            --替换一个常量：#define M 10                    //使用M代替常量10
                            --替换一个表达式：#define M 4+4                 //使用M代替4+4运算
                    有参宏：在宏定义中的参数为形式参数，在宏调用的参数为实际参数。
                    使用
                        --替换一个运算公式：#define M(y) y+y    //使用M（y）替换y+y,展开的时候为求实际参数值相加
                        --替换一个函数：#define LEN(X) strlen(x)    //使用LEN（x）代替函数strlen(x)
            *条件编译
            条件编译是根据实际定义宏（定义某一类条件）进行代码静态编译的手段。根据条件表达式的值或者某个特定的宏定义来确定编译的条件。
                --条件编译模型1：
                    #ifdef 标识符/宏定义
                        程序段1；
                    #else
                        程序段2；
                    #endif
                    如果定义了标识符或进行了特殊宏定义，那么执行程序段1，否则执行程序段2
                --条件编译模型2：
                    #ifndef 标识符/宏定义
                        程序段1；
                    #else
                        程序段2；
                    #endif
                    如果没有定义标识符或者没有进行了特殊宏定义，那么执行程序段1，否则执行程序段2
                --条件编译模型3：
                    #if 条件表达式/值
                        程序段1；
                    #else
                        程序段2；
                    #endif
                    条件表达式或值为真时，执行程序段1，如果为假时，执行程序段2

    (2)模块化编程
        a)模块化编程概述
            模块化编程是指将一个功能模块的所有代码都单独编程独立的C源文件程序，以便增强工程代码的可阅读性和可移植性，以及有利于程序结构的划分。
        b)模块化编程文件组成
            --C源程序文件：C源程序文件存放工程的功能性函数代码以及一些可调用的变量定义。
            --H头文件：H头文件是对其相关的源程序文件的接口声明（函数声明），存放预编译指令（宏定义），外部变量声明，以及一些非执行性代码（类型重定义）
        c)头文件应用
            --头文件编写：
            头文件中使用条件预编译指令对头文件进行防止重复编译。
            格式：
                #ifndef __头文件标识符_H__
                #define __头文件标识符_H__
                #endif
            一个C头文件对应一个C源程序文件，头文件标识符和头文件的文件名保持一致，并且尽量和C源程序文件的文件名保持一致
            --头文件的使用：
            只要需要使用到某个C源程序文件中的功能函数，则就需要在使用当前C源程序文件中包含被调用的C源程序文件对应的头文件
    (3)C语言32个关键字
        a)类型关键字12个
        char、short、int、long、float、double、unsigned、signed、void、struct、union、enum
        b)控制语句关键字12个
        if、else、switch、for、while、do、case、default、break、continue、goto、return 
        c)存储类别关键字4个
        auto、static、register、volatile 
        auto：自动变量，主要用于修饰函数内部的变量，告诉编译这个变量是局部变量。但由于函数内部的变量默认为局部变量，一般省略不写。使用格式为“auto  数据类型 变量名”。
        register：寄存器变量，声明变量保存的地址为 CPU 内部的寄存器中，而不是通过内存寻址访问，已提高工作效率
        volatile：防止变量在运行的过程中被优化而出现的程序错误，使用“volatile”规定了每次读取该变量的值时，都需要从变量的物理地址中读取
        d)其他类别4个
        extern、const、typedef、sizeof
        const：声明一个变量的值不可变，要求 const 修改的变量在定义的时候必须进行初始化赋值
        const int a：声明变量 a 的值不可变
        int const a：声明变量 a 的值不可变
        int *const a：声明指针 a 的指向不可变，但指向地址中的值可变
        const int *a：声明指针 a 的指向可变，但指向地址中的值不可变
        const int *const a：声明指针 a 的指向不可变，指向地址中的值也不可变
    (4)C语言运算符
        
