整体C语言学习框架
1.数据结构和运算符以及C语言控制语句
2.数组与函数
3.指针结构体链表							时间：20220223-20220227	//题目练习
4.经典练习题库


3.指针结构体链表
	（1）指针
		a)指针的概述
			指针是一种地址类型
			32位下：指针的大小为4字节
			64位下：指针的大小为8字节
			8位下：指针的大小为3字节
			指针变量主要用于存储数据的地址，通过地址去访问保存在地址中的值。
			指针类型的大小和它指向空间的大小没有任何关系，指针保存的是地址数据，大小空间保存的是数值数据的数据范围。
		b)指针符号
			&：取地址符，取出指针数据的地址
			*：取内容符，取出指针指向地址的内容
		c)指针变量
			指针变量的定义：数据类型 *变量名   //int *p;
			-数据类型：规定了指针可以指向什么样子的数据类型
			-*：指针的标志，仅仅是为了渠区分普通变量和指针变量的
			-变量名：跟标识符命名规则相同

			指针变量的初始化：避免野指针，指针变量都要进行初始化操作（赋值为NULL）

			指针变量的应用：
			-指向变量的指针（普通指针）：
				指针变量和普通变量的关系：
				--指针变量是用来指向（保存）普通变量的地址
				--可以通过指针变量来操作普通变量空间的值
				--指针变量的地址是变量，普通变量的地址是常量
				--一个指针变量可以指向不同的普通变量（同一时间只能指向一个），一个普通变量可以被多个指针变量同时指向
			-指向数组的指针：
				指针和数组一样，都可以通过下标来访问数组中的每一个元素。
				指针变量+1，指针内存的地址+n(n由指针指向的空间类型决定)。
				当指针配合下标使用的时候，当做数组的形式来使用（不需要用*去取内容），当操作的是指针地址的时候，当做指针的形式来使用（需要用*去取内容）。
				指针的运算只能使用+、-、++、--，不能使用*、/、%。
				访问数组中当前元素的下一个元素的地址：+，++
				访问数组中当前元素的前一个元素的地址：-，--
				优先级排序：++ --  > * > + -

		d)二级指针
			二级指针：又称为指向指针的指针（一般用于指针数组来使用）。
			定义格式：指针类型 **变量名（int **p）
			二级指针与普通指针与普通变量之间的关系：
				二级指针变量保存的是该指针指向的指针的地址（二级指针的地址就是指向的指针地址）
				*二级指针变量（即取一次二级指针的值），是指针变量指向普通变量的地址。
				**二级指针变量（即取两次二级指针的值），即取指针变量指向的普通变量的值。

		e)指针数组和数组指针
			指针数组：本质是一个数组（指针类型的数组），数组中的每一个元素的类型都是指针类型，使用的时候结合数组和指针的规则使用。
			数组指针：本质是一个指针（数组类型的指针），数组指针用于访问二维数组的时候使用。
			定义方式：数据类型 （* 变量名）[数组长度] （例如：int （* num）[4]）
				数据类型：规定了数组指针指向的数组的类型
				数组长度：规定了数组指针指向的数组的长度（二维数组的列长度）
				例子：
				#include <stdio.h> 
				int main() 
				{ 
				  int num[2][3] = {1,2,3,4,5,6}; 
				  int (*pnum)[3] = NULL; 
				   
				  pnum = num; 
				   
				  /*  第 0 行第 0 列数据  */ 
				  printf("num[0][0] = %d\n",(*pnum)[0]); 
				  /*  第 1 行第 1 列数据  */ 
				  printf("num[1][1] = %d\n",(*(pnum + 1))[1]); 
				}
		f)指针函数和函数指针
			*指针函数：本质是一个函数（函数的类型是指针类型），函数的返回值是一个指针（返回值是一个地址数据），用法和函数一样，
			常用于返回一个数组或者指针变量的地址。
			指针函数地址的返回只能返回静态普通变量的地址，动态开辟的地址，全局变量的地址以及指针变量的地址，不能返回普通局部变量的地址。
			（普通局部变量的作用域只在函数内部有效，函数运行结束后就会释放普通局部变量的地址，所以不能返回普通局部变量）
			*函数指针：函数指针的本质是指针，指针指向的类型是一个函数类型。使用方法和指针一样。
			定义：函数类型 （*函数名）（形式参数）    例如：int （*p）[int，int]
				函数类型：规定了函数指针指向的函数的函数类型，（指向的函数的返回值和函数指针的函数类型相同）
				形式参数：规定了函数指针指向的函数的函数类型以及个数（指定的函数的形参的数据类型以及形参的个数，必须和函数指针定义的类型和个数一样）

		g)空类型指针和指针四要素
			空类型指针：是指可以执行任何数据类型元素的指针。在使用空类型指针的时候，必须要吧空类型指针强制转换成指向元素的数据类型
			指针四要素：
				指针必须要有类型，指针类型规定执行特定类型的指针。
				指针所指向的数据类型决定了指针值的数据类型
				在使用指针的时候，指针必须要有指向，避免野指针的出现（指向不定的指针）
				指针本身也占用存储空间（指针本身也是一个变量）
		h)指针的应用场合
			1）当函数需要传一个数组的时候，可以用指针来实现（指针作为函数的形参来代替数组作为函数的形参）
			2）当函数需要返回一个地址的时候，需要用指针来实现（指针函数）
			3）当函数需要改变实参的时候，需要用指针来实现
			
	（2）结构体
		a)结构体概述
			结构体是一种数据类型（构造体数据类型）
			使用关键字：struct
			是指一系列具有相同类型或者不同类型的数据构成的数据组合。
			结构体元素和数组元素一样，都是在存储空间中连续存放的。
		b)结构体定义
			结构体类型声明格式：
			struct 结构体类型名称
			{
				成员1 （元素1）;
				成员2 （元素2）;
				...
				成员N （元素N）;
			};
				struct:结构体关键字，表示要定义一个结构体类型
				结构体类型名称：是一个自定义标识符
				成员：结构体类型中所包含的元素变量类型
				注意：结构体声明是一个声明语句，在结构体声明的最后必须加上；结束。
					声明结构体时，结构体中成员不能有值
			结构体类型定义格式：
				先声明结构体类型，再使用结构体类型定义变量。
				格式：结构体关键字 结构体类型名称 变量名
				定义结构体变量时的三种方法：
					-方法1：先声明结构体类型，再使用结构体类型定义变量
					格式：结构体关键字 结构体类型名称 变量名
					struct test
					{
						int num1;
						char name;
					};
					//定义结构体变量
					struct test test1;
					-方法2：在声明结构体类型的时候，同时定义结构体变量
					注意：在声明结构体变量的时候，同时定义结构体变量，结构体类型的名称可以不写。
					但这样的结构体类型只能使用一次，往后不能使用结构体变量去定义其他变量。
					例如：
					struct test
					{
						int num1;
						char name;
					}student;
					//还可以定义结构体变量
					struct test student1;
					例如：不能再使用结构体变量定义其他变量
					struct
					{
						int num1;
						char name;
					}student;
					-方法3：利用关键字"typedef"关键字去类型重定义一个结构体类型，然后使用新的结构体类型定义结构体变量
					typedef struct test
					{
						int num1;
						char name;
					}TEST;
					//利用新的结构体类型名称去定义结构体变量
					TEST student；
		c)结构体赋值
			-1.初始化赋值
				初始化赋值是指在定义结构体的时候，直接对结构体变量中的所有元素进行整体赋值，在直接整体赋值的时候，结构体变量中的元素默认值为0
				注意：初始化赋值的内容顺序一定要跟声明时结构体中的成员顺序保持一致，并且结构体变量只能在初始化赋值时对结构体变量进行整体直接赋值
				例如：
				struct AAA 
  				{ 
    				int num; 
    				char name[20]; 
    				char *p; 
  				}x = {1,"LiLei","abc"}; 
				struct AAA y = {2,"HanMeimei","def"}; 
			-2.逐一赋值
			逐一赋值是指对结构体变量中的某一成员元素进行单独赋值。
			注意：给结构体变量中的元素进行逐一赋值时，一定要注意元素的类型
			-3.整体赋值
			整体赋值是指同类型（相同结构体类型）的结构体变量之间可以进行相互赋值
		d)结构体嵌套
			结构体嵌套是指一个结构体中嵌套另一个结构体，在调用被嵌套的结构体中的元素变量时，需要先访问嵌套结构体中的元素名称，然后再访问被嵌套的结构体
			中具体的元素。
			注意：在结构体嵌套时需要注意被嵌套的结构体类型一定要在嵌套结构体类型之前定义。
		e)结构体空间大小
			结构体类型的存储方式是从上往下存储（从上往下依次给每一个成员分配空间），开辟空间的原则是
				找到结构体类型中最大的成员类型字节数为最终对齐单位（最大字节数的倍数）
				元素的数据类型>=4字节，先以四字节为对齐单位（每次开辟四字节空间），然后再以最大字节空间对齐（最大字节的倍数）
				元素的数据类型<4字节，以最大字节数来开辟空间。

				当两个不同类型的变量存放在一个空间时，需要做字节对齐。
				如果被对齐的变量之后是同类型的变量，可以使用后面的变量一起做字节对齐。
				如果被对齐的变量之后不是同类型的变量，不能做字节对齐，需要重新开辟空间。
		f)结构体数组
			结构体数组的本质是一个数组，数组中的元素类型是结构体类型。
			定义方式：结构体关键字 结构体类型 变量名[数组长度]		例如：struct AAA x[10]
			(个人理解：有一个数组，数组长度是多少，就有多少个结构体)
		g)结构体指针
			结构体指针的本质是一个指针，指针的类型是结构体类型（指向结构体类型的指针）
			定义方式：结构体关键字 结构体类型 *变量名   例如：struct AAA *p;
		h)结构体元素访问方式
			通过变量名访问：变量名.元素成员
			通过指针访问：指针变量名->元素成员   （*指针变量名）.元素成员
			结构体变量的首地址：&变量名
		i)共用体和枚举介绍
			--共用体:共用体又称联合体，是一种特殊的结构体。关键字“union”
				共用体的特点：共用体的成员都是用的同一个内存空间（共用变量最大的元素空间），数据元素的赋值会把之前的数据都覆盖掉。
				格式：
				union 共用体类型
				{
					成员1，
					成员2，
					...
					成员n,
				};
			--枚举：枚举类型实际是一组整形常量。关键字“enum”
			格式：
			emun 枚举类型名称
			{
				常量1，
				常量2，
				...
				常量N，
			}；
			枚举变量默认是从0开始，后面一个枚举常量是前面一个枚举常量+1。

	（3）链表
		a) C语言链表的介绍
			--C语言数据结构的概述
				数据结构是指相互之间存在关系的数据元素的结合方式，常用的数据结构有顺序存储结构和链式存储结构
				1.顺序存储结构：顺序存储结构是指数据元素在内存存储单元中是连续排列存放的，可以通过相对位置表示数据元素之间的关系。（数组，结构体，结构体数组）
				2.链式存储结构：链式存储结构，表示元素在内存中不是连续存放的，一个数据元素内存中存放下一个元素的地址（链表）
			--链表概述
				链表是指多组不同类型又有相互联系的组合（可以看成结构体数组），但结构体元素在存储器中不是连续存放的（区别于结构体数组）。使用链表可以合理的分配存储空间以及合理分配存储资源。
			--链表组成和分类
				1.链表组成：链表是由若干个结点（链表的结构体数据元素）组成，每一个结点中包含数据域（用于存储结构体数据的地方）和指针域（用于存储下一个结点的首地址）两部分内容
					一个完整的链表由表头，结点以及表尾三部分组成
					表头：链表首个结点，表头没有数据域，只有指针域（结构体指针，用于指向某一个结构体元素）
					结点：数据域+指针域，结点按照实际需要可以有任意个，数据域为结构体元素，指针域为结构体指针（存放下一个结构体元素的地址）
					表尾：链表的最后一个结点，只有数据域（结构体元素），没有指针域（指针域为NULL）
					链表组成：表头-->结点1-->结点2--> ... -->结点n-->表尾-->NULL
				2.链表分类：
					根据链表中指针域的个数分类：单链表（指针域只有一个指针，指向下一个结点地址），双链表（指针域有两个指针，一个指向下一个结点地址，一个指向上一个结点地址）
					根据链表的表尾是否指向链表的表头：静态链表（链表的表尾指向NULL），动态链表（链表的表尾重新指向表头）
		b) C语言动态内存分配
			1.malloc函数
				函数原型：void *_Cdecl malloc（size_t size）
				函数作用：向存储器申请一块新的存储空间
				函数形参：申请空间的大小（字节）
				函数返回值：申请到的新空间的地址
			2.calloc函数
				函数原型：void *_Cdecl calloc(size_t nitems, size_t size);
				函数作用：向存储器申请多块新的存储空间
				函数形参：申请空间的个数，以及每个申请空间的大小（字节）
				函数返回值：申请到第一块存储空间的地址（每块存储地址是连续的，空间地址 = 上一个空间地址+申请的空间大小）
			3.realloc函数
				函数原型：函数原型：void *_Cdecl realloc(void *block, size_t size);
				函数作用：修改已申请的存储空间的大小
				函数形参：需要修改的空间地址以及新空间的大小（字节）
				函数返回值：返回修改后新空间的地址
			4.free函数
				函数原型：void _Cdecl free(void *block);
				函数作用：释放以及申请的存储空间
				函数参数：需要释放的空间地址
				函数返回值：无
		c) C语言链表的应用
			1.链表的创建
				步骤：
					--开辟新节点的存储空间（创建结点），并往新结点的数据域写入数据，吧结点的指针域指向NULL
					--串联结点，（表头指向第一个结点，上一个结点指向下一个结点）
					--添加表尾
					--返回新建链表的表头（如果返回的是某一个结点的地址，输出的时候会在返回的结点开始输出）
			2.查询链表结点
				步骤：
					--遍历需要查询的链表中的每一个结点信息
					--验证结点是否符合查询条件，如果有符合的结点，则返回符合结点的结点地址，如果都不符合，返回NULL
			3.删除链表中的结点
				步骤：	
					--查询需要删除的结点，如果有需要删除的结点，转到下一步，如果没有查询到需要删除的结点，返回原链表地址
					--把需要删除的节点删除，然后把被删除结点的上一个节点的指针域指向被删除节点的下一个节点
					--释放删除节点
					例如：head -- A -- B -- C --NULL
					删除A：head -- B，再释放A
					删除B：A -- C ，再释放B
			4.插入添加结点
				步骤：
					--找到需要插入结点的位置（找到指定节点）
					--在指定节点之前插入：查询指定节点，让指定节点的上一个结点指向插入结点，插入节点指向指定节点
					--在指定节点之后插入：让指定节点指向插入节点，插入节点指向指向节点的下一个节点

	练习题集合：
	指针：
		示例讲解题：
		示例1：指针占用的地址大小
		可以通过sizeof(指针类型 *)去计算
		例如：
			sizeof(char	*)	//计算数据类型位char 型的指针变量占用的内存空间
			sizeof(int *)	//计算数据类型为int 型的指针变量占用的内存空间
			结果：在存储空间一样的计算机下，占用内存是一样的
		1、编写一个子函数，函数实现的功能是将两个数组中的所有值相加，然返回最终的结果。
		2、编写一个子函数，函数功能是将两个数组中的对应位的值相加，然后保存到第 3 个数组中。
		3、写一个函数实现在一个字符串中查找键盘上输入的字符，并且返回这个字符的地址。
		4、写一个函数对数组内的内容进行排序。提示：冒泡法排序。
		5、写一个函数实现把输入的两个字符串连接成一个字符串，并且返回连接好的字符串的首地址。
		6、编写一个子函数实现在键盘上输入两个字符串，比较输入的字符串是否一样。
		7、编写一个子函数实现在键盘上输入一个字符串，检测输入的字符串是否为回文。
	结构体：
		1、水果店卖水果，苹果 5 元 1 斤，葡萄 6.8 元 1 斤，香蕉 2.5 元 1 斤，消费输入购买的斤数，就可以自动得到总价。
		2、利用结构体数组完成一个学生信息管理系统。
	链表：
		使用链表实现学生信息管理系统









